.\" 
.\" Copyright (c) 2003, 2007-14 Matteo Frigo
.\" Copyright (c) 2003, 2007-14 Massachusetts Institute of Technology
.\" 
.\" This program is free software; you can redistribute it and/or modify
.\" it under the terms of the GNU General Public License as published by
.\" the Free Software Foundation; either version 2 of the License, or
.\" (at your option) any later version.
.\" 
.\" This program is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\" 
.\" You should have received a copy of the GNU General Public License
.\" along with this program; if not, write to the Free Software
.\" Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
.\"
.TH FFTW-WISDOM-TO-CONF 1 "February, 2003" "fftw" "fftw"
.SH NAME
fftw\-wisdom\-to\-conf \- generate FFTW wisdom (pre-planned transforms)
.SH SYNOPSIS
\fBfftw\-wisdom\-to\-conf\fR [< \fIINPUT\fR] [> \fIOUTPUT\fR]
.SH DESCRIPTION
.PP
.\" Add any additional description here
.I fftw\-wisdom\-to\-conf
is a utility to generate C
.B configuration
routines from FFTW
.B wisdom
files, where the latter contain saved information about how to
optimally compute (Fourier) transforms of various sizes.  A
configuration routine is a C subroutine that you link into your
program, replacing a routine of the same name in the FFTW library,
that determines which parts of FFTW are callable by your program.

The reason to do this is that, if you only need transforms of a
limited set of sizes and types, and if you are statically linking your
program, then using a configuration file generated from wisdom for
those types can substantially reduce the size of your executable.
(Otherwise, because of FFTW's dynamic nature, all of FFTW's transform
code must be linked into any program using FFTW.)

FFTW is a free library to compute discrete Fourier transforms in one
or more dimensions, for arbitrary sizes, and of both real and complex
data, among other related operations.  More information on FFTW can be
found at the FFTW home page:
.I http://www.fftw.org

.I fftw\-wisdom\-to\-conf
reads wisdom from standard input and writes the configuration to
standard output.  It can easily be combined with the
.I fftw\-wisdom
tool, for example:

fftw\-wisdom \-n \-o wisdom cof1024 cob1024
.br
fftw\-wisdom\-to\-conf < wisdom > conf.c

will create a configuration "conf.c" containing only those parts of
FFTW needed for the optimized complex forwards and backwards
out-of-place transforms of size 1024 (also saving the wisdom itself in
"wisdom").

Alternatively, you can run your actual program, export wisdom for all
plans that were created (ideally in FFTW_PATIENT or FFTW_EXHAUSTIVE
mode), use this as input for \fIfftw\-wisdom\-to\-conf\fR,
and then re-link your program with the resulting configuration routine.

Note that the configuration routine does not contain the wisdom, only
the routines necessary to implement the wisdom, so your program should
also import the wisdom in order to benefit from the pre-optimized
plans.
.SH OPTIONS
.TP
\fB\-h\fR, \fB\-\-help\fR
Display help on the command-line options and usage.
.TP
\fB\-V\fR, \fB\-\-version\fR
Print the version number and copyright information.
.SH BUGS
Send bug reports to fftw@fftw.org.
.SH AUTHORS
Written by Steven G. Johnson and Matteo Frigo.

Copyright (c) 2003, 2007-14 Matteo Frigo
.br
Copyright (c) 2003, 2007-14 Massachusetts Institute of Technology
.SH "SEE ALSO"
fftw-wisdom(1)

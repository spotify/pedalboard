# This stub file was automatically generated by mypy's `stubgen`,
# The file was then modified manually; if you get a build failure
# that leads you here, feel free to modify the file manually as well.
#
# This file may diverge from the runtime/native implementation of the code,
# as long as the interface remains the same. (i.e.: pure-Python classes
# may be listed here even if they override/inherit from native classes.)

from typing import Any, ClassVar, Dict, Iterator, List, Optional, Type, Union, overload

import numpy
from numpy.typing import NDArray

class Bitcrush(Plugin):
    bit_depth: float
    def __init__(self, bit_depth: float = ...) -> None: ...

class Chorus(Plugin):
    centre_delay_ms: float
    depth: float
    feedback: float
    mix: float
    rate_hz: float
    def __init__(
        self,
        rate_hz: float = ...,
        depth: float = ...,
        centre_delay_ms: float = ...,
        feedback: float = ...,
        mix: float = ...,
    ) -> None: ...

class Compressor(Plugin):
    attack_ms: float
    ratio: float
    release_ms: float
    threshold_db: float
    def __init__(
        self,
        threshold_db: float = ...,
        ratio: float = ...,
        attack_ms: float = ...,
        release_ms: float = ...,
    ) -> None: ...

class Convolution(Plugin):
    mix: float
    def __init__(self, impulse_response_filename: str, mix: float = ...) -> None: ...
    @property
    def impulse_response_filename(self) -> str: ...

class Delay(Plugin):
    delay_seconds: float
    feedback: float
    mix: float
    def __init__(
        self, delay_seconds: float = ..., feedback: float = ..., mix: float = ...
    ) -> None: ...

class Distortion(Plugin):
    drive_db: float
    def __init__(self, drive_db: float = ...) -> None: ...

class GSMFullRateCompressor(Plugin):
    quality: Resample.Quality
    def __init__(self, quality: Resample.Quality = ...) -> None: ...

class Gain(Plugin):
    gain_db: float
    def __init__(self, gain_db: float = ...) -> None: ...

class HighShelfFilter(Plugin):
    cutoff_frequency_hz: float
    gain_db: float
    q: float
    def __init__(
        self, cutoff_frequency_hz: float = ..., gain_db: float = ..., q: float = ...
    ) -> None: ...

class HighpassFilter(Plugin):
    cutoff_frequency_hz: float
    def __init__(self, cutoff_frequency_hz: float = ...) -> None: ...

class Invert(Plugin):
    def __init__(self) -> None: ...

class LadderFilter(Plugin):
    class Mode:
        __members__: ClassVar[dict] = ...  # read-only
        BPF12: ClassVar[LadderFilter.Mode] = ...
        BPF24: ClassVar[LadderFilter.Mode] = ...
        HPF12: ClassVar[LadderFilter.Mode] = ...
        HPF24: ClassVar[LadderFilter.Mode] = ...
        LPF12: ClassVar[LadderFilter.Mode] = ...
        LPF24: ClassVar[LadderFilter.Mode] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __getstate__(self) -> int: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        def __setstate__(self, state: int) -> None: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...
    BPF12: ClassVar[LadderFilter.Mode] = ...
    BPF24: ClassVar[LadderFilter.Mode] = ...
    HPF12: ClassVar[LadderFilter.Mode] = ...
    HPF24: ClassVar[LadderFilter.Mode] = ...
    LPF12: ClassVar[LadderFilter.Mode] = ...
    LPF24: ClassVar[LadderFilter.Mode] = ...
    cutoff_hz: float
    drive: float
    mode: LadderFilter.Mode
    resonance: float
    def __init__(
        self,
        mode: LadderFilter.Mode = ...,
        cutoff_hz: float = ...,
        resonance: float = ...,
        drive: float = ...,
    ) -> None: ...

class Limiter(Plugin):
    release_ms: float
    threshold_db: float
    def __init__(self, threshold_db: float = ..., release_ms: float = ...) -> None: ...

class LowShelfFilter(Plugin):
    cutoff_frequency_hz: float
    gain_db: float
    q: float
    def __init__(
        self, cutoff_frequency_hz: float = ..., gain_db: float = ..., q: float = ...
    ) -> None: ...

class LowpassFilter(Plugin):
    cutoff_frequency_hz: float
    def __init__(self, cutoff_frequency_hz: float = ...) -> None: ...

class MP3Compressor(Plugin):
    vbr_quality: float
    def __init__(self, vbr_quality: float = ...) -> None: ...

class NoiseGate(Plugin):
    attack_ms: float
    ratio: float
    release_ms: float
    threshold_db: float
    def __init__(
        self,
        threshold_db: float = ...,
        ratio: float = ...,
        attack_ms: float = ...,
        release_ms: float = ...,
    ) -> None: ...

class PeakFilter(Plugin):
    cutoff_frequency_hz: float
    gain_db: float
    q: float
    def __init__(
        self, cutoff_frequency_hz: float = ..., gain_db: float = ..., q: float = ...
    ) -> None: ...

class Phaser(Plugin):
    centre_frequency_hz: float
    depth: float
    feedback: float
    mix: float
    rate_hz: float
    def __init__(
        self,
        rate_hz: float = ...,
        depth: float = ...,
        centre_frequency_hz: float = ...,
        feedback: float = ...,
        mix: float = ...,
    ) -> None: ...

class PitchShift(Plugin):
    semitones: float
    def __init__(self, semitones: float = ...) -> None: ...

class Plugin:
    def __init__(self) -> None: ...
    @overload
    def process(
        self,
        input_array: NDArray[numpy.float32],
        sample_rate: float,
        buffer_size: int = ...,
        reset: bool = ...,
    ) -> NDArray[numpy.float32]: ...
    @overload
    def process(
        self,
        input_array: NDArray[numpy.float64],
        sample_rate: float,
        buffer_size: int = ...,
        reset: bool = ...,
    ) -> NDArray[numpy.float32]: ...
    def reset(self) -> None: ...
    def __call__(self, *args, **kwargs) -> Any: ...

class PluginContainer(Plugin):
    def __init__(self, plugins: List[Plugin]) -> None: ...
    def append(self, plugin: Plugin) -> None: ...
    def insert(self, index: int, plugin: Plugin) -> None: ...
    def remove(self, plugin: Plugin) -> None: ...
    def __contains__(self, plugin: Plugin) -> bool: ...
    def __delitem__(self, index: int) -> None: ...
    def __getitem__(self, index: int) -> Plugin: ...
    def __iter__(self) -> Iterator: ...
    def __len__(self) -> int: ...
    def __setitem__(self, index: int, plugin: Plugin) -> None: ...

class Resample(Plugin):
    class Quality:
        __members__: ClassVar[dict] = ...  # read-only
        CatmullRom: ClassVar[Resample.Quality] = ...
        Lagrange: ClassVar[Resample.Quality] = ...
        Linear: ClassVar[Resample.Quality] = ...
        WindowedSinc: ClassVar[Resample.Quality] = ...
        ZeroOrderHold: ClassVar[Resample.Quality] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __getstate__(self) -> int: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        def __setstate__(self, state: int) -> None: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...
    CatmullRom: ClassVar[Resample.Quality] = ...
    Lagrange: ClassVar[Resample.Quality] = ...
    Linear: ClassVar[Resample.Quality] = ...
    WindowedSinc: ClassVar[Resample.Quality] = ...
    ZeroOrderHold: ClassVar[Resample.Quality] = ...
    quality: Resample.Quality
    target_sample_rate: float
    def __init__(
        self, target_sample_rate: float = ..., quality: Resample.Quality = ...
    ) -> None: ...

class Reverb(Plugin):
    damping: float
    dry_level: float
    freeze_mode: float
    room_size: float
    wet_level: float
    width: float
    def __init__(
        self,
        room_size: float = ...,
        damping: float = ...,
        wet_level: float = ...,
        dry_level: float = ...,
        width: float = ...,
        freeze_mode: float = ...,
    ) -> None: ...

class _AudioProcessorParameter:
    raw_value: float
    def __init__(self, *args, **kwargs) -> None: ...
    def get_name(self, maximum_string_length: int) -> str: ...
    def get_raw_value_for_text(self, string_value: str) -> float: ...
    def get_text_for_raw_value(self, raw_value: float, maximum_string_length: int = ...) -> str: ...
    @property
    def default_raw_value(self) -> float: ...
    @property
    def index(self) -> int: ...
    @property
    def is_automatable(self) -> bool: ...
    @property
    def is_boolean(self) -> bool: ...
    @property
    def is_discrete(self) -> bool: ...
    @property
    def is_meta_parameter(self) -> bool: ...
    @property
    def is_orientation_inverted(self) -> bool: ...
    @property
    def label(self) -> str: ...
    @property
    def name(self) -> str: ...
    @property
    def num_steps(self) -> int: ...
    @property
    def string_value(self) -> str: ...

name: Compile, Test, and Deploy

on:
  pull_request: {}
  push:
    branches:
      - master
  release:
    types: [published]

jobs:
  lint-python:
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    strategy:
      matrix:
        python-version: ['3.6', '3.7', '3.8', '3.9', '3.10']
        os: [ubuntu-latest]
    name: Lint Python
    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Install lint dependencies
        env:
          # on macOS and with Python 3.10: building NumPy from source fails without these options:
          NPY_BLAS_ORDER: ""
          NPY_LAPACK_ORDER: ""
        run: |
          python -m pip install --upgrade pip
          pip install wheel
          pip install -r test-requirements.txt
      - name: Lint Python code
        run: flake8 . --count --ignore=W503,E203 --exclude .git,dist,doc,build --show-source --statistics --max-line-length 100
      - name: Check Python formatting
        run: black pedalboard tests --line-length 100 --experimental-string-processing --diff --check

  lint-cpp:
    runs-on: ubuntu-latest
    continue-on-error: true
    name: Lint C++
    steps:
      - uses: actions/checkout@v2
        # Don't check out submodules, as the action below will look at ALL C++ code!
      - name: Check C++ Formatting
        uses: jidicula/clang-format-action@v3.4.0
        with:
          clang-format-version: 11
          fallback-style: LLVM

  run-tests:
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    env:
      MINIMUM_COVERAGE_PERCENTAGE: 90
    strategy:
      matrix:
        python-version: ['3.6', '3.7', '3.8', '3.9', '3.10']
        os: [ubuntu-18.04, ubuntu-latest, windows-latest, macos-10.15, macos-latest]
    name: Test with Python ${{ matrix.python-version }} on ${{ matrix.os }}
    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update \
          && sudo apt-get install -y pkg-config libsndfile1 \
          libx11-dev libxrandr-dev libxinerama-dev \
          libxrender-dev libxcomposite-dev libxcb-xinerama0-dev \
          libxcursor-dev libfreetype6 libfreetype6-dev
      - name: Install test dependencies
        env:
          # on macOS and with Python 3.10: building NumPy from source fails without these options:
          NPY_BLAS_ORDER: ""
          NPY_LAPACK_ORDER: ""
        run: |
          python -m pip install --upgrade pip
          pip install wheel
          pip install -r test-requirements.txt
      - name: Install JQ for coverage badge on Linux
        run: sudo apt-get install -y jq
        if: runner.os == 'Linux'
      - name: Install JQ for coverage badge on macOS
        run: brew install jq
        if: runner.os == 'macOS'
      - name: Install JQ for coverage badge on Windows
        run: chocolatey install jq
        if: runner.os == 'Windows'
      - name: Build pedalboard locally
        run: python setup.py install
      - name: Install VSTs for testing
        env:
          GCS_ASSET_BUCKET_NAME: ${{ secrets.GCS_ASSET_BUCKET_NAME }}
          GCS_READER_SERVICE_ACCOUNT_KEY: ${{ secrets.GCS_READER_SERVICE_ACCOUNT_KEY }}
        run: python ./tests/download_test_plugins.py
      - name: Run tests
        if: matrix.os != 'ubuntu-latest' || matrix.python-version != '3.6'
        run: pytest -v --cov-report term --cov-fail-under=${{ env.MINIMUM_COVERAGE_PERCENTAGE }} --cov=pedalboard
      - name: Run tests with coverage reporting
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.6'
        run: |
          pytest -v --cov-report term --cov-fail-under=${{ env.MINIMUM_COVERAGE_PERCENTAGE }} --cov=pedalboard \
          && coverage json --fail-under=${{ env.MINIMUM_COVERAGE_PERCENTAGE }} \
          && jq -r 'def roundit: .*100.0 + 0.5|floor/100.0; .totals.percent_covered | round | "COVERAGE_PERCENTAGE=" + (. | tostring) + "%" ' coverage.json >> $GITHUB_ENV \
          && jq -r 'if .totals.percent_covered > ${{ env.MINIMUM_COVERAGE_PERCENTAGE }} then "COVERAGE_COLOR=green" else "COVERAGE_COLOR=red" end' coverage.json >> $GITHUB_ENV
      - name: Create coverage badge
        uses: schneegans/dynamic-badges-action@v1.1.0
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.6' && github.event_name == 'release' && github.event.action == 'published'
        with:
          auth: ${{ secrets.COVERAGE_GIST_SECRET }}
          gistID: 8736467e9952991ef44a67915ee7c762
          filename: coverage.json
          label: Test Coverage
          message: ${{ env.COVERAGE_PERCENTAGE }}
          color: ${{ env.COVERAGE_COLOR }}

  run-tests-with-address-sanitizer:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: ['3.6', '3.7', '3.8', '3.9', '3.10']
        os: [ubuntu-latest]
    name: Test with Python ${{ matrix.python-version }} + Address Sanitizer
    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update \
          && sudo apt-get install -y pkg-config libsndfile1 \
          libx11-dev libxrandr-dev libxinerama-dev \
          libxrender-dev libxcomposite-dev libxcb-xinerama0-dev \
          libxcursor-dev libfreetype6 libfreetype6-dev
      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install wheel
          pip install -r test-requirements.txt
      - name: Build pedalboard locally
        env:
          DEBUG: "1"
          USE_ASAN: "1"
          CC: clang
          CXX: clang++
        run: python setup.py install
      - name: Run tests with ASan loaded
        # pytest can exit before all Python objects have been destroyed,
        # so we tell ASan to ignore leaks.
        run: |
          ASAN_OPTIONS=detect_leaks=0 \
          LD_PRELOAD=$(clang -print-file-name=libclang_rt.asan-x86_64.so) \
          pytest -v

  build-wheels:
    needs: [lint-python, lint-cpp]
    runs-on: ${{ matrix.os }}
    continue-on-error: false
    if: github.event_name == 'release' && github.event.action == 'published'
    strategy:
      matrix:
        python-version: ['3.8']
        os: [ubuntu-latest, windows-latest, macos-latest]
    name: Build wheels on ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      # Used to host cibuildwheel, so version doesn't really matter
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel>=2.0.0a4

      - name: Build wheels
        run: python -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_TEST_REQUIRES: -r test-requirements.txt
          CIBW_TEST_COMMAND: "pytest {project}/tests"
          CIBW_ARCHS: auto64 # Only support building 64-bit wheels. It's 2021!
          CIBW_SKIP: '*27* *35*' # Ignore Python 2.x, 3.5
          CIBW_ARCHS_MACOS: x86_64 universal2 # Support Apple Silicon
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: pip install auditwheel-symbols && (auditwheel repair -w {dest_dir} {wheel} || auditwheel-symbols --manylinux 2010 {wheel})
          CIBW_BEFORE_BUILD_LINUX: |
            yum install -y libsndfile \
            libX11-devel \
            libXrandr-devel \
            libXinerama-devel \
            libXrender-devel \
            libXcomposite-devel \
            libXinerama-devel \
            libXcursor-devel \
            freetype-devel
          # The manylinux container doesn't have a new enough glibc version,
          # so we can't run post-wheel-build tests there.
          # Also testing any pypy versions fails, as TensorFlow isn't pypy compatible.
          CIBW_TEST_SKIP: "*manylinux* *pp* *-macosx_universal2:arm64"

      - uses: actions/upload-artifact@v2
        with:
          path: ./wheelhouse/*.whl

  upload-pypi:
    needs: [build-wheels]
    runs-on: ubuntu-latest
    name: "Upload wheels to PyPI"
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: artifact
          path: dist
      - uses: pypa/gh-action-pypi-publish@v1.4.2
        with:
          user: __token__
          password: ${{ secrets.PYPI_DEPLOY_TOKEN }}
